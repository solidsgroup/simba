#!/usr/bin/env python3
import sys
from simba import info

import pathlib
import argparse
from simba import util

if len(sys.argv) < 2:
    print(
"""usage: simba <command> [<args>]
Basic commands:
    add     Update database with all new records
    status  Print new or modified records
    view    Browse records
    web     Start web server
    init    Initialize simba in current directory
""")
    exit(-1)

if sys.argv[1] in ["init"]:
    print("Simba " + info.version)
    from simba import simba_init
    exit(0)

simbaPath = util.getSimbaDir(pathlib.Path.cwd())
if not simbaPath:
    print("Cannot find a simba directory. If this is your first time running simba")
    print("here, try running simba init")
    exit(-1)
print("Simba " + info.version)
config    = util.getConfigFile(simbaPath)
scripts   = util.getScripts(config)


if sys.argv[1] in ["add","status"]:
    from simba import simba_add
    parser = argparse.ArgumentParser(description='Sift through outputs')
    parser.add_argument('mode',nargs=1)
    parser.add_argument('locations',nargs='*',help='Specific locations to add (default: add all)')
    parser.add_argument('-d','--database', default=str(simbaPath/'results.db'), help='Name of database')
    parser.add_argument('-r','--remove', nargs='*', help='Tables to remove')
    parser.add_argument('-t','--table', default=None, help='Table name in database')
    parser.add_argument('-a','--all', action='store_true', default=False, help='Force update of ALL records')
    args=parser.parse_args()
    simba_add.add(simbaPath,config,scripts,sys.argv[1],None,args.database,args.remove,args.table,args.all,locations=args.locations)
elif sys.argv[1] in ["view"]:
    from simba import simba_view
elif sys.argv[1] in ["web"]:
    from simba import simba_web
elif sys.argv[1] in ["rt"]:
    print("Starting regression test")
    from simba import simba_rt
elif sys.argv[1] in ["remote"]:
    from simba import simba_remote
#elif sys.argv[1] in ["diff"]:
#    print("Simba " + info.version)
#    from simba import simba_diff
#elif sys.argv[1] in ["merge", "mergetool"]:
#    print("Simba " + info.version)
#    print(sys.argv)
#    from simba import simba_merge
#elif sys.argv[1] in ["find"]:
#    from simba import simba_find
else:
    print("Command \"", sys.argv[1], "\" is not a valid command")
