#!/usr/bin/env python3
import sys
print("Simba 2020.11.18.01")


import pathlib
import argparse
from simba import util

if len(sys.argv) < 2:
    print(
"""usage: simba <command> [<args>]
Basic commands:
    add     Update database with all new records
    status  Print new or modified records
    view    Browse records
    web     Start web server
    init    Initialize simba in current directory
""")
elif sys.argv[1] in ["add","status"]:
    simbaPath = util.getSimbaDir(pathlib.Path.cwd())
    config    = util.getConfigFile(simbaPath)
    scripts   = util.getScripts(config)

    from simba import simba_add
    parser = argparse.ArgumentParser(description='Sift through outputs')
    parser.add_argument('mode')
    parser.add_argument('directories', nargs='*', help='List of directories containing ALAMO output')
    parser.add_argument('-d','--database', default=str(simbaPath/'results.db'), help='Name of database')
    parser.add_argument('-r','--remove', nargs='*', help='Tables to remove')
    parser.add_argument('-t','--table', default=None, help='Table name in database')
    parser.add_argument('-a','--all', action='store_true', default=False, help='Force update of ALL records')
    args=parser.parse_args()
    simba_add.add(simbaPath,config,scripts,sys.argv[1],args.directories,args.database,args.remove,args.table,args.all)
elif sys.argv[1] in ["view"]:
    simbaPath = util.getSimbaDir(pathlib.Path.cwd())
    config    = util.getConfigFile(simbaPath)
    scripts   = util.getScripts(config)
    from simba import simba_view
elif sys.argv[1] in ["web"]:
    simbaPath = util.getSimbaDir(pathlib.Path.cwd())
    config    = util.getConfigFile(simbaPath)
    scripts   = util.getScripts(config)
    from simba import simba_web
elif sys.argv[1] in ["init"]:
    from simba import simba_init
elif sys.argv[1] in ["rt"]:
    simbaPath = util.getSimbaDir(pathlib.Path.cwd())
    config    = util.getConfigFile(simbaPath)
    scripts   = util.getScripts(config)
    print("Starting regression test")
    from simba import simba_rt
elif sys.argv[1] in ["remote"]:
    simbaPath = util.getSimbaDir(pathlib.Path.cwd())
    config    = util.getConfigFile(simbaPath)
    scripts   = util.getScripts(config)
    from simba import simba_remote
elif sys.argv[1] in ["diff"]:
    from simba import simba_diff
elif sys.argv[1] in ["merge"]:
    from simba import simba_merge
else:
    print("Command \"", sys.argv[1], "\" is not a valid command")
